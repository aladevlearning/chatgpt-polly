AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'chat-gpt-polly

  SAM Template for an Polly based Chat GPT API.

  '
Globals:
  Function:
    Timeout: 30
    Handler: app.lambdaHandler
    Runtime: nodejs14.x
Parameters:
  SourceBucketName:
    Type: String
    Default: chat-gpt-speeches-bucket
  OpenAIApiKey:
    Type: String
    Default: <API_KEY_HERE>
  AskPath:
    Type: String
    Default: /ask
  NotificationEmailAddress:
    Type: String
    Description: Enter the email to notify for policy violations.
    Default: lagrotteri@gmail.com
Resources:
  SourceBucket:
    Type: AWS::S3::Bucket
    DependsOn:
    - SNSTopicPolicy
    Properties:
      BucketName:
        Ref: SourceBucketName
      NotificationConfiguration:
        TopicConfigurations:
        - Event: s3:ObjectCreated:*
          Topic:
            Ref: SNSTopic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Protocol: email
        Endpoint:
          Ref: NotificationEmailAddress
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: sns:Publish
          Resource:
            Ref: SNSTopic
          Condition:
            ArnEquals:
              aws:SourceArn:
                Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: SourceBucketName
            StringEquals:
              aws:SourceAccount:
                Ref: AWS::AccountId
      Topics:
      - Ref: SNSTopic
  ChatGptPollyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
  ChatGptPollyStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ..\..\statemachine\chat_gpt_polly.asl.json
      DefinitionSubstitutions:
        AskChatGptFunctionArn:
          Fn::GetAtt:
          - AskChatGptFunction
          - Arn
        TextToSpeechFunctionArn:
          Fn::GetAtt:
          - TextToSpeechFunction
          - Arn
      Events:
        ChatGptPollyApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /ask
            RestApiId:
              Ref: ChatGptPollyApi
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: AskChatGptFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: TextToSpeechFunction
  AskChatGptFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: AskChatGptFunction
      Environment:
        Variables:
          OPENAI_API_KEY:
            Ref: OpenAIApiKey
    Metadata:
      SamResourceId: AskChatGptFunction
  TextToSpeechFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TextToSpeechFunction
      Environment:
        Variables:
          REGION: eu-west-1
          OUTPUT_S3_BUCKET:
            Ref: SourceBucketName
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: SourceBucketName
      - Statement:
        - Sid: PollyPolicy
          Effect: Allow
          Action:
          - polly:StartSpeechSynthesisTask
          Resource: '*'
    Metadata:
      SamResourceId: TextToSpeechFunction
Outputs:
  ChatGptPollyStateMachineArn:
    Description: ChatGPT Polly state machine ARN
    Value:
      Ref: ChatGptPollyStateMachine
  ChatGptPollyStateMachineRole:
    Description: IAM Role created for ChatGPT Polly state machine based on the specified
      SAM Policy Templates
    Value:
      Fn::GetAtt:
      - ChatGptPollyStateMachineRole
      - Arn
